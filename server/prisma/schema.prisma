// This is your Prisma schema file
// Learn more about it here: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // defaults to postgresql://postgres:postgres@localhost:5432/formicary
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String    @id @default(uuid())
  username           String    @unique
  email              String?   @unique
  walletAddress      String?   @unique
  googleId           String?   @unique
  bio                String?
  isProfileComplete  Boolean   @default(false)
  authMethod         AuthMethod
  roles              UserRole[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastLogin          DateTime  @default(now())
  lastRegistration   DateTime  @default(now())
  registrationCount  Int       @default(1)
  accountSettings    AccountSettings?
  profile            Profile?
  tasks              Task[]
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  skills    String[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  avatar    String?
  reputation Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountSettings {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  emailNotifications Boolean @default(true)
  twoFactorEnabled Boolean @default(false)
  theme         String   @default("light")
  language      String   @default("en")
  timezone      String   @default("UTC")
  privacy       Privacy  @default(PUBLIC)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RestrictedUsername {
  id         String   @id @default(uuid())
  word       String   @unique
  reason     String?
  createdAt  DateTime @default(now())
}

model Task {
  id        String    @id @default(uuid())
  type      TaskType
  status    TaskStatus
  client    String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  startTime DateTime  @default(now())
  endTime   DateTime?
  reward    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum TaskType {
  Storage
  Processing
  Verification
  Computation
}

enum TaskStatus {
  pending
  running
  completed
  failed
}

enum AuthMethod {
  WALLET
  GOOGLE
}

enum UserRole {
  PRODUCTION_CREW
  EVENT_ORGANIZER
}

enum Privacy {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
}
