// This is your Prisma schema file
// Learn more about it here: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // defaults to postgresql://postgres:postgres@localhost:5432/formicary
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String    @id @default(uuid())
  username           String    @unique
  email              String?   @unique
  walletAddress      String?   @unique
  googleId           String?   @unique
  bio                String?
  isProfileComplete  Boolean   @default(false)
  authMethod         AuthMethod
  roles              UserRole[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastLogin          DateTime  @default(now())
  lastRegistration   DateTime  @default(now())
  registrationCount  Int       @default(1)
  accountSettings    AccountSettings?
  profile            Profile?
  tasks              Task[]
  createdEvents      Event[]   @relation("EventOrganizer")
  crewAssignments    EventCrew[] @relation("CrewAssignments")
  attestationsReceived Attestation[]   @relation("recipient")
  attestationsGiven    Attestation[]   @relation("attester")
  trustScore           Float?          // Calculated trust score based on attestations
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  skills    String[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  avatar    String?
  reputation Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountSettings {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  emailNotifications Boolean @default(true)
  twoFactorEnabled Boolean @default(false)
  theme         String   @default("light")
  language      String   @default("en")
  timezone      String   @default("UTC")
  privacy       Privacy  @default(PUBLIC)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RestrictedUsername {
  id         String   @id @default(uuid())
  word       String   @unique
  reason     String?
  createdAt  DateTime @default(now())
}

model Task {
  id        String    @id @default(uuid())
  type      TaskType
  status    TaskStatus
  client    String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  startTime DateTime  @default(now())
  endTime   DateTime?
  reward    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Event {
  id               String     @id @default(cuid())
  title            String
  description      String?
  location         String
  startDate        DateTime
  endDate          DateTime
  budget           Float?
  status           String     @default("PENDING")
  organizerId      String
  organizer        User       @relation("EventOrganizer", fields: [organizerId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  crewPositions    CrewPosition[]
  crewAssignments  EventCrew[]
  attestations     Attestation[]
}

model EventCrewPosition {
  id          String    @id @default(uuid())
  title       String
  description String?
  skills      String[]
  payRate     Decimal   @db.Decimal(10, 2)
  quantity    Int       @default(1)
  filled      Int       @default(0)
  eventId     String
  event       Event     @relation(fields: [eventId], references: [id])
  crew        EventCrew[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model EventCrew {
  id              String    @id @default(uuid())
  status          CrewStatus @default(APPLIED)
  userId          String
  user            User      @relation("CrewAssignments", fields: [userId], references: [id])
  eventId         String
  event           Event     @relation(fields: [eventId], references: [id])
  positionId      String
  position        EventCrewPosition @relation(fields: [positionId], references: [id])
  applicationDate DateTime  @default(now())
  hiredDate       DateTime?
  rating          Decimal?  @db.Decimal(3, 1)
  feedback        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Attestation Models for EAS Integration
model AttestationType {
  id               String       @id @default(cuid())
  name             String       @unique
  description      String
  schema           String       // JSON schema for this attestation type
  onChainSchemaUID String?      // EAS schema UID once deployed
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  attestations     Attestation[]
}

model Attestation {
  id               String         @id @default(cuid())
  uid              String?        // EAS attestation UID once published on-chain
  attestationType  AttestationType @relation(fields: [attestationTypeId], references: [id])
  attestationTypeId String
  attester         User           @relation("attester", fields: [attesterId], references: [id])
  attesterId       String
  recipient        User           @relation("recipient", fields: [recipientId], references: [id])
  recipientId      String
  data             String         // JSON data for the attestation
  eventId          String?
  event            Event?         @relation(fields: [eventId], references: [id])
  transactionHash  String?        // Ethereum transaction hash once published
  revoked          Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

enum TaskType {
  Storage
  Processing
  Verification
  Computation
}

enum TaskStatus {
  pending
  running
  completed
  failed
}

enum AuthMethod {
  WALLET
  GOOGLE
}

enum UserRole {
  PRODUCTION_CREW
  EVENT_ORGANIZER
}

enum Privacy {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
}

enum EventStatus {
  PLANNING
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELED
}

enum CrewStatus {
  APPLIED
  SHORTLISTED
  HIRED
  REJECTED
  COMPLETED
}
